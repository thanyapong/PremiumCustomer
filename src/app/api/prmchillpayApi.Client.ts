//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { customFormatter } from "../modules/_common/commonFunctions";
import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as dayjs from 'dayjs';

export class BackgroundClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับส่งผลการชำระเงินแบบ Real Time (จำเป็นต้องมี SSL Certificate) (URL Background)
     * @return Success
     */
    datafeed(cancelToken?: CancelToken | undefined): Promise<RequestFormPaymentDataDto_Response> {
        let url_ = this.baseUrl + "/datafeed";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processDatafeed(_response);
        });
    }

    protected processDatafeed(response: AxiosResponse): Promise<RequestFormPaymentDataDto_Response> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<RequestFormPaymentDataDto_Response>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<RequestFormPaymentDataDto_Response>(null as any);
    }

    /**
     * API สำหรับส่งผลกลับเมื่อกดปุ่ม “Go Back to Merchant Website”  (URL Result)
     * @return Success
     */
    result(cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/result";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "POST",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processResult(_response);
        });
    }

    protected processResult(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            // return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class PaymentClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับเชื่อมต่อแบบ API โดยร้านค้าสามารถออกแบบ UI เองได้ : ใช้ฝั่ง User ไม่มี Authorize
     * @param body (optional) 
     * @return Success
     */
    payment(body?: PaymentDto_Request | undefined, cancelToken?: CancelToken | undefined): Promise<PaymentDto_ResponseServiceResponse> {
        let url_ = this.baseUrl + "/chillpay/payment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body, customFormatter);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPayment(_response);
        });
    }

    protected processPayment(response: AxiosResponse): Promise<PaymentDto_ResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<PaymentDto_ResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentDto_ResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับสอบถาม : ใช้ฝั่ง User ไม่มี Authorize
     * @param body (optional) 
     * @return Success
     */
    inquiry(body?: InquiryDto_Request | undefined, cancelToken?: CancelToken | undefined): Promise<InquiryDto_ResponseServiceResponse> {
        let url_ = this.baseUrl + "/chillpay/inquiry";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body, customFormatter);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInquiry(_response);
        });
    }

    protected processInquiry(response: AxiosResponse): Promise<InquiryDto_ResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<InquiryDto_ResponseServiceResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<InquiryDto_ResponseServiceResponse>(null as any);
    }

    /**
     * API สำหรับการตรวจสอบสถานะของรายการ กรณีที่ร้านค้าไม่ได้รับข้อมูลที่ส่งกลับจากระบบ ChillPay
     * @param body (optional) 
     * @return Success
     */
    result2(body?: PaymentResultDto_Request | undefined, cancelToken?: CancelToken | undefined): Promise<PaymentResultDto_ResponseServiceResponse> {
        let url_ = this.baseUrl + "/chillpay/payment/result";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body, customFormatter);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processResult2(_response);
        });
    }

    protected processResult2(response: AxiosResponse): Promise<PaymentResultDto_ResponseServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<PaymentResultDto_ResponseServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentResultDto_ResponseServiceResponse>(null as any);
    }
}

export class TransactionClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * API สำหรับ Search Payment Transaction
     * @param body (optional) 
     * @return Success
     */
    payment2(body?: PaymentTransactionDto_Request | undefined, cancelToken?: CancelToken | undefined): Promise<PaymentTransactionDto_ResponseListServiceResponse> {
        let url_ = this.baseUrl + "/chillpay/transaction/payment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body, customFormatter);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processPayment2(_response);
        });
    }

    protected processPayment2(response: AxiosResponse): Promise<PaymentTransactionDto_ResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<PaymentTransactionDto_ResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PaymentTransactionDto_ResponseListServiceResponse>(null as any);
    }

    /**
     * API สำหรับ Search Settlement Transaction
     * @param body (optional) 
     * @return Success
     */
    settlement(body?: SettlementDto_Request | undefined, cancelToken?: CancelToken | undefined): Promise<SettlementDto_ResponseListServiceResponse> {
        let url_ = this.baseUrl + "/chillpay/transaction/settlement";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body, customFormatter);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processSettlement(_response);
        });
    }

    protected processSettlement(response: AxiosResponse): Promise<SettlementDto_ResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200 = _responseText;
            result200 = resultData200;
            return Promise.resolve<SettlementDto_ResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<SettlementDto_ResponseListServiceResponse>(null as any);
    }
}

export interface InquiryDto_Request {
    payRef?: string | undefined;
    orderRef?: string | undefined;
}

export interface InquiryDto_Response {
    orderRef?: string | undefined;
    payRef?: number;
    amount?: number;
    custName?: string | undefined;
    paymentUrl?: string | undefined;
    expiredDate?: dayjs.Dayjs | undefined;
    ssChannelCode?: string | undefined;
}

export interface InquiryDto_ResponseServiceResponse {
    data?: InquiryDto_Response;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PaymentDto_Request {
    orderRef?: string | undefined;
    customerDetail?: string | undefined;
    amount?: number;
    phoneNumber?: string | undefined;
    description?: string | undefined;
    ssChannelCode?: string | undefined;
    successURL?: string | undefined;
    failURL?: string | undefined;
    cancelURL?: string | undefined;
    errorURL?: string | undefined;
    pendingURL?: string | undefined;
    nonce?: string | undefined;
}

export interface PaymentDto_Response {
    message?: string | undefined;
    payRef?: number;
    amount?: number;
    orderRef?: string | undefined;
    customerId?: string | undefined;
    ssChannelCode?: string | undefined;
    returnUrl?: string | undefined;
    paymentUrl?: string | undefined;
    expiredDate?: string | undefined;
}

export interface PaymentDto_ResponseServiceResponse {
    data?: PaymentDto_Response;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PaymentResultDto_Request {
    payRef?: string | undefined;
    orderRef?: string | undefined;
}

export interface PaymentResultDto_Response {
    transactionId?: number;
    amount?: number;
    orderNo?: string | undefined;
    customerId?: string | undefined;
    bankCode?: string | undefined;
    paymentDate?: string | undefined;
    paymentStatus?: number;
    bankRefCode?: string | undefined;
    currentDate?: string | undefined;
    currentTime?: string | undefined;
    paymentDescription?: string | undefined;
    creditCardToken?: string | undefined;
    currency?: string | undefined;
    customerName?: string | undefined;
}

export interface PaymentResultDto_ResponseServiceResponse {
    data?: PaymentResultDto_Response;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PaymentTransactionDto_Request {
    paymentChannel?: string | undefined;
    orderNo?: string | undefined;
    status?: string | undefined;
    transactionDateFrom?: string | undefined;
    transactionDateTo?: string | undefined;
    paymentDateFrom?: string | undefined;
    paymentDateTo?: string | undefined;
}

export interface PaymentTransactionDto_Response {
    payRef?: number;
    transactionDate?: string | undefined;
    merchant?: string | undefined;
    customer?: string | undefined;
    orderRef?: string | undefined;
    paymentChannel?: string | undefined;
    paymentDate?: string | undefined;
    amount?: string | undefined;
    fee?: string | undefined;
    discount?: string | undefined;
    totalAmount?: string | undefined;
    currency?: string | undefined;
    status?: string | undefined;
    settled?: boolean;
}

export interface PaymentTransactionDto_ResponseListServiceResponse {
    data?: PaymentTransactionDto_Response[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface RequestFormPaymentDataDto_Response {
    status?: number;
    code?: number | undefined;
    message?: string | undefined;
}

export interface SettlementDto_Request {
    paymentChannel?: string | undefined;
    orderRef?: string | undefined;
    settled?: boolean | undefined;
    transactionDateFrom?: string | undefined;
    transactionDateTo?: string | undefined;
    paymentDateFrom?: string | undefined;
    paymentDateTo?: string | undefined;
}

export interface SettlementDto_Response {
    payRef?: number;
    transactionDate?: string | undefined;
    paymentDate?: string | undefined;
    merchant?: string | undefined;
    customer?: string | undefined;
    orderRef?: string | undefined;
    paymentChannel?: string | undefined;
    amount?: string | undefined;
    fee?: string | undefined;
    totalAmount?: string | undefined;
    currency?: string | undefined;
    exchangeRate?: string | undefined;
    discount?: string | undefined;
    netAmount?: string | undefined;
    serviceAmount?: string | undefined;
    serviceVAT?: string | undefined;
    serviceWHT?: string | undefined;
    settleAmount?: string | undefined;
    settled?: boolean;
}

export interface SettlementDto_ResponseListServiceResponse {
    data?: SettlementDto_Response[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}